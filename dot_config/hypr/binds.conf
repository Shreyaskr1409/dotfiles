$terminal = alacritty
$terminal = wezterm
$fileManager = nautilus
$menu = ~/.config/rofi/launchers/type-4/launcher.sh
$menuAlt = ~/.config/rofi/launchers/type-6/launcher.sh

$mainMod = SUPER

bind = $mainMod, Return, exec, $terminal
bind = $mainMod SHIFT, Q, killactive, 
bind = $mainMod, M, exec, $fileManager
bind = $mainMod SHIFT, Space, togglefloating, 
bind = $mainMod SHIFT, P, exec, wlogout
bind = $mainMod, P, exec, ~/.config/rofi/powermenu/type-5/powermenu.sh
bind = $mainMod SHIFT, M, exec, ~/.config/rofi/applets/bin/mpd.sh
bind = $mainMod SHIFT, D, exec, $menu
bind = $mainMod, D, exec, $menuAlt
bind = $mainMod, F, fullscreen
bind = , XF86AudioRaiseVolume, exec, pamixer -i 5
bind = , XF86AudioLowerVolume, exec, pamixer -d 5
bind = , XF86AudioMute, exec, pamixer -t
bind = , XF86MonBrightnessUp, exec, brightnessctl set 5%+
bind = , XF86MonBrightnessDown, exec, brightnessctl set 5%-
bind = , Print, exec, ~/.config/rofi/applets/bin/screenshot.sh
bind = CTRL, Print, exec, grim -g "$(slurp)" - | wl-copy
bind = CTRL SHIFT, Print, exec, grim -o $(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name') - | wl-copy

# Move focus with mainMod + arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d
# Move window with mainMod + Shift + arrow keys
bind = $mainMod SHIFT, left, movewindow, l
bind = $mainMod SHIFT, right, movewindow, r
bind = $mainMod SHIFT, up, movewindow, u
bind = $mainMod SHIFT, down, movewindow, d
# Move focus with mainMod + HJKL (vim keys)
bind = $mainMod, H, movefocus, l
bind = $mainMod, L, movefocus, r
bind = $mainMod, K, movefocus, u
bind = $mainMod, J, movefocus, d
# Move window with mainMod + Shift + HJKL (vim keys)
bind = $mainMod SHIFT, H, movewindow, l
bind = $mainMod SHIFT, L, movewindow, r
bind = $mainMod SHIFT, K, movewindow, u
bind = $mainMod SHIFT, J, movewindow, d

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Define the resize submap
bind = $mainMod, R, submap, resize

# Create the resize submap
submap = resize
# Resize with hjkl (vim keys)
bind = , h, resizeactive, -10 0
bind = , j, resizeactive, 0 10
bind = , k, resizeactive, 0 -10
bind = , l, resizeactive, 10 0
# Resize with arrow keys
bind = , left, resizeactive, -10 0
bind = , down, resizeactive, 0 10
bind = , up, resizeactive, 0 -10
bind = , right, resizeactive, 10 0
# Faster resize with shift
bind = Shift, h, resizeactive, -50 0
bind = Shift, j, resizeactive, 0 50
bind = Shift, k, resizeactive, 0 -50
bind = Shift, l, resizeactive, 50 0
# Faster resize with arrow keys
bind = Shift, left, resizeactive, -50 0
bind = Shift, down, resizeactive, 0 50
bind = Shift, up, resizeactive, 0 -50
bind = Shift, right, resizeactive, 50 0
# Exit resize mode
bind = , escape, submap, reset
bind = , return, submap, reset
# Return to normal submap
submap = reset

